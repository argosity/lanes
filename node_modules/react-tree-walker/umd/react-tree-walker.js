(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"));
	else if(typeof define === 'function' && define.amd)
		define(["react"], factory);
	else if(typeof exports === 'object')
		exports["react-tree-walker"] = factory(require("react"));
	else
		root["react-tree-walker"] = factory(root["React"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPromise = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
// Extracted from: https://github.com/apollostack/react-apollo/blob/master/src/server.ts

// eslint-disable-next-line import/no-extraneous-dependencies


exports.default = reactTreeWalker;

var _react = __webpack_require__(0);

var isPromise = exports.isPromise = function isPromise(x) {
  return (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object' && typeof x.then === 'function';
};

// Recurse an React Element tree, running visitor on each element.
// If visitor returns `false`, don't call the element's render function
//   or recurse into its child elements
function reactTreeWalker(element, visitor) {
  var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  // Is this element a Component?
  if (typeof element.type === 'function') {
    var Component = element.type;
    var props = Object.assign({}, Component.defaultProps, element.props);
    var childContext = context;
    var child = void 0;

    // Is this a class component? (http://bit.ly/2j9Ifk3)
    var isReactClassComponent = Component.prototype && (Component.prototype.isReactComponent || Component.prototype.isPureReactComponent);

    if (isReactClassComponent) {
      var _ret = function () {
        var instance = new Component(props, context);
        // In case the user doesn't pass these to super in the constructor
        instance.props = instance.props || props;
        instance.context = instance.context || context;

        // Make the setState synchronous.
        instance.setState = function (newState) {
          instance.state = Object.assign({}, instance.state, newState);
        };

        // Call componentWillMount if it exists.
        if (instance.componentWillMount) {
          instance.componentWillMount();
        }

        // Ensure the child context is initialised if it is available. We will
        // need to pass it down the tree.
        if (instance.getChildContext) {
          childContext = Object.assign({}, context, instance.getChildContext());
        }

        // Hit up our visitor!
        if (visitor(element, instance, context) === false) {
          // Visitor returned false, indicating a desire to not traverse.
          return {
            v: void 0
          };
        }

        // Get the render output as the child.
        child = instance.render();
      }();

      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    } else {
      // Stateless Functional Component

      // Hit up our visitor!
      if (visitor(element, null, context) === false) {
        // Visitor returned false, indicating a desire to not traverse.
        return;
      }

      // Get the output for the function, as the child.
      child = Component(props, context);
    }

    // Only continue walking if a child exists.
    if (child) {
      reactTreeWalker(child, visitor, childContext);
    }
  } else {
    // This must be a basic element, such as a string or dom node.

    // Hit up our visitor!
    if (visitor(element, null, context) === false) {
      // Visitor returned false, indicating a desire to not traverse.
      return;
    }

    // If the element has children then we will walk them.
    if (element.props && element.props.children) {
      _react.Children.forEach(element.props.children, function (child) {
        if (child) {
          reactTreeWalker(child, visitor, context);
        }
      });
    }
  }
}

/***/ }
/******/ ]);
});