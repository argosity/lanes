'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPromise = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
// Extracted from: https://github.com/apollostack/react-apollo/blob/master/src/server.ts

// eslint-disable-next-line import/no-extraneous-dependencies


exports.default = reactTreeWalker;

var _react = require('react');

var isPromise = exports.isPromise = function isPromise(x) {
  return (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object' && typeof x.then === 'function';
};

// Recurse an React Element tree, running visitor on each element.
// If visitor returns `false`, don't call the element's render function
//   or recurse into its child elements
function reactTreeWalker(element, visitor) {
  var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  // Is this element a Component?
  if (typeof element.type === 'function') {
    var Component = element.type;
    var props = Object.assign({}, Component.defaultProps, element.props);
    var childContext = context;
    var child = void 0;

    // Is this a class component? (http://bit.ly/2j9Ifk3)
    var isReactClassComponent = Component.prototype && (Component.prototype.isReactComponent || Component.prototype.isPureReactComponent);

    if (isReactClassComponent) {
      var _ret = function () {
        var instance = new Component(props, context);
        // In case the user doesn't pass these to super in the constructor
        instance.props = instance.props || props;
        instance.context = instance.context || context;

        // Make the setState synchronous.
        instance.setState = function (newState) {
          instance.state = Object.assign({}, instance.state, newState);
        };

        // Call componentWillMount if it exists.
        if (instance.componentWillMount) {
          instance.componentWillMount();
        }

        // Ensure the child context is initialised if it is available. We will
        // need to pass it down the tree.
        if (instance.getChildContext) {
          childContext = Object.assign({}, context, instance.getChildContext());
        }

        // Hit up our visitor!
        if (visitor(element, instance, context) === false) {
          // Visitor returned false, indicating a desire to not traverse.
          return {
            v: void 0
          };
        }

        // Get the render output as the child.
        child = instance.render();
      }();

      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    } else {
      // Stateless Functional Component

      // Hit up our visitor!
      if (visitor(element, null, context) === false) {
        // Visitor returned false, indicating a desire to not traverse.
        return;
      }

      // Get the output for the function, as the child.
      child = Component(props, context);
    }

    // Only continue walking if a child exists.
    if (child) {
      reactTreeWalker(child, visitor, childContext);
    }
  } else {
    // This must be a basic element, such as a string or dom node.

    // Hit up our visitor!
    if (visitor(element, null, context) === false) {
      // Visitor returned false, indicating a desire to not traverse.
      return;
    }

    // If the element has children then we will walk them.
    if (element.props && element.props.children) {
      _react.Children.forEach(element.props.children, function (child) {
        if (child) {
          reactTreeWalker(child, visitor, context);
        }
      });
    }
  }
}