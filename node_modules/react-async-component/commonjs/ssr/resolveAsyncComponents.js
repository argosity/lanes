'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resolveAsyncComponents;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactTreeWalker = require('react-tree-walker');

var _reactTreeWalker2 = _interopRequireDefault(_reactTreeWalker);

var _ServerProvider = require('./ServerProvider');

var _ServerProvider2 = _interopRequireDefault(_ServerProvider);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createExecContext() {
  var registry = {};
  return {
    registerComponent: function registerComponent(id, Component) {
      registry[id] = Component;
    },
    getComponent: function getComponent(id) {
      return registry[id];
    }
  };
}
// eslint-disable-next-line import/no-extraneous-dependencies
function resolveAsyncComponents(app) {
  var appWithAsyncComponents = _react2.default.createElement(
    _ServerProvider2.default,
    { execContext: createExecContext() },
    app
  );

  var doWalk = function doWalk(el) {
    var ctx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var fetchRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var resolvers = [];

    var visitor = function visitor(element, instance, context) {
      var skipRoot = !fetchRoot && element === el;
      if (instance && typeof instance.resolveAsyncComponent === 'function' && !skipRoot) {
        var resolver = instance.resolveAsyncComponent();
        resolvers.push({ resolver: resolver, element: element, context: context });
        return false;
      }
      return undefined;
    };

    (0, _reactTreeWalker2.default)(el, visitor, ctx);

    var nestedPromises = resolvers.map(function (_ref) {
      var resolver = _ref.resolver,
          element = _ref.element,
          context = _ref.context;
      return resolver.then(function () {
        return doWalk(element, context);
      });
    });

    return nestedPromises.length > 0 ? Promise.all(nestedPromises) : Promise.resolve([]);
  };

  return doWalk(appWithAsyncComponents, {}, true)
  // Swallow errors.
  .catch(function () {
    return undefined;
  }).then(function () {
    return {
      appWithAsyncComponents: appWithAsyncComponents,
      state: state,
      STATE_IDENTIFIER: _constants.STATE_IDENTIFIER
    };
  });
}