'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = withAsyncComponents;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactTreeWalker = require('react-tree-walker');

var _reactTreeWalker2 = _interopRequireDefault(_reactTreeWalker);

var _AsyncComponentProvider = require('./AsyncComponentProvider');

var _AsyncComponentProvider2 = _interopRequireDefault(_AsyncComponentProvider);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function createExecContext() {
  var idPointer = 0;
  var registry = {};
  return {
    getNextId: function getNextId() {
      idPointer += 1;
      return idPointer;
    },
    registerComponent: function registerComponent(id, Component) {
      registry[id] = Component;
    },
    getComponent: function getComponent(id) {
      return registry[id];
    },
    getResolved: function getResolved() {
      return Object.keys(registry).reduce(function (acc, cur) {
        return Object.assign(acc, _defineProperty({}, cur, true));
      }, {});
    }
  };
}

function withAsyncComponents(app) {
  var execContext = createExecContext();

  var isBrowser = typeof window !== 'undefined';
  var rehydrateState = isBrowser && typeof window[_constants.STATE_IDENTIFIER] !== 'undefined' ? window[_constants.STATE_IDENTIFIER] : null;

  var appWithAsyncComponents = _react2.default.createElement(
    _AsyncComponentProvider2.default,
    { execContext: execContext },
    app
  );

  if (isBrowser && !rehydrateState) {
    return Promise.resolve({
      appWithAsyncComponents: appWithAsyncComponents
    });
  }

  var doWalk = function doWalk(el) {
    var ctx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var fetchRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var resolvers = [];

    var visitor = function visitor(element, instance, context) {
      var skipRoot = !fetchRoot && element === el;
      if (instance && typeof instance.getAsyncComponentData === 'function' && !skipRoot) {
        var _instance$getAsyncCom = instance.getAsyncComponentData(),
            id = _instance$getAsyncCom.id,
            defer = _instance$getAsyncCom.defer,
            getResolver = _instance$getAsyncCom.getResolver;

        if (rehydrateState) {
          if (!rehydrateState.resolved[id]) {
            return false;
          }
          rehydrateState[id] = false;
        } else if (defer) {
          // Deferred, so return false to stop walking down this branch.
          return false;
        }

        var resolver = getResolver();
        resolvers.push({
          resolver: resolver,
          element: element,
          context: Object.assign(context, { ASYNC_WALKER_BOUNDARY: true })
        });
        return false;
      }
      return undefined;
    };

    (0, _reactTreeWalker2.default)(el, visitor, ctx);

    var nestedPromises = resolvers.map(function (_ref) {
      var resolver = _ref.resolver,
          element = _ref.element,
          context = _ref.context;
      return resolver.then(function () {
        return doWalk(element, context);
      });
    });

    return nestedPromises.length > 0 ? Promise.all(nestedPromises) : Promise.resolve([]);
  };

  return doWalk(appWithAsyncComponents, {}, true)
  // Swallow errors.
  .catch(function () {
    return undefined;
  })
  // Ensure that state rehydration is killed
  .then(function () {
    if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object') {
      window[_constants.STATE_IDENTIFIER] = null;
    }
  }).then(function () {
    return {
      appWithAsyncComponents: appWithAsyncComponents,
      state: { resolved: execContext.getResolved() },
      STATE_IDENTIFIER: _constants.STATE_IDENTIFIER
    };
  });
}