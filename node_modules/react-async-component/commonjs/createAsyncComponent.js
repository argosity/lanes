'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Duck type promise check.
var isPromise = function isPromise(x) {
  return (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object' && typeof x.then === 'function';
};

var validSSRModes = ['render', 'defer', 'boundary'];

function createAsyncComponent(args) {
  var name = args.name,
      resolve = args.resolve,
      _args$es6Aware = args.es6Aware,
      es6Aware = _args$es6Aware === undefined ? true : _args$es6Aware,
      _args$ssrMode = args.ssrMode,
      ssrMode = _args$ssrMode === undefined ? 'render' : _args$ssrMode,
      Loading = args.Loading;


  if (validSSRModes.indexOf(ssrMode) === -1) {
    throw new Error('Invalid ssrMode provided to createAsyncComponent');
  }

  var id = null;

  // Takes the given module and if it has a ".default" the ".default" will
  // be returned. i.e. handy when you could be dealing with es6 imports.
  var es6Resolve = function es6Resolve(x) {
    return es6Aware && (typeof x === 'function' || (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object') && typeof x.default !== 'undefined' ? x.default : x;
  };

  var getResolver = function getResolver() {
    var resolver = resolve();
    if (!isPromise(resolver)) {
      throw new Error('The "resolve" function on an AsyncComponent should return a Promise');
    }
    return resolver;
  };

  var AsyncComponent = function (_React$Component) {
    _inherits(AsyncComponent, _React$Component);

    function AsyncComponent(props, context) {
      _classCallCheck(this, AsyncComponent);

      var _this = _possibleConstructorReturn(this, (AsyncComponent.__proto__ || Object.getPrototypeOf(AsyncComponent)).call(this, props));

      var asyncComponents = context.asyncComponents,
          asyncComponentsAncestor = context.asyncComponentsAncestor;


      _this.state = { Component: null };

      // Assign a unique id to this instance if it hasn't already got one.
      // Note: the closure usage.
      var getNextId = asyncComponents.getNextId,
          getComponent = asyncComponents.getComponent;

      if (!id) {
        id = getNextId();
      }

      // Try resolve the component.
      var Component = es6Resolve(getComponent(id));
      if (Component) {
        _this.state = { Component: Component };
      } else {
        _this.getAsyncComponentData = function () {
          return {
            id: id,
            defer: ssrMode === 'defer' || asyncComponentsAncestor && asyncComponentsAncestor.isBoundary,
            getResolver: function getResolver() {
              return _this.resolveComponent();
            }
          };
        };
      }
      return _this;
    }

    _createClass(AsyncComponent, [{
      key: 'getChildContext',
      value: function getChildContext() {
        if (ssrMode !== 'boundary') {
          return undefined;
        }
        return {
          asyncComponentsAncestor: {
            isBoundary: true
          }
        };
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (!this.state.Component) {
          this.resolveComponent(this.props);
        }
      }
    }, {
      key: 'resolveComponent',
      value: function resolveComponent() {
        var _this2 = this;

        return getResolver().then(function (Component) {
          if (_this2.unmounted) {
            // The component is unmounted, so no need to set the state.
            return;
          }
          _this2.context.asyncComponents.registerComponent(id, Component);
          if (_this2.setState) {
            _this2.setState({
              Component: es6Resolve(Component)
            });
          }
        });
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.unmounted = true;
      }
    }, {
      key: 'render',
      value: function render() {
        var Component = this.state.Component;
        // eslint-disable-next-line no-nested-ternary

        return Component ? _react2.default.createElement(Component, this.props) : Loading ? _react2.default.createElement(Loading, this.props) : null;
      }
    }]);

    return AsyncComponent;
  }(_react2.default.Component);

  AsyncComponent.childContextTypes = {
    asyncComponentsAncestor: _react2.default.PropTypes.shape({
      isBoundary: _react2.default.PropTypes.bool
    })
  };

  AsyncComponent.contextTypes = {
    asyncComponents: _react2.default.PropTypes.shape({
      getNextId: _react2.default.PropTypes.func.isRequired,
      getComponent: _react2.default.PropTypes.func.isRequired,
      registerComponent: _react2.default.PropTypes.func.isRequired
    }).isRequired
  };

  AsyncComponent.displayName = name || 'AsyncComponent';

  return AsyncComponent;
}

exports.default = createAsyncComponent;